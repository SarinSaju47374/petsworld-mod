<style>
     #modify-form{
        display:block;
        grid-template-columns:1fr;
        width:100%;
    }
</style>
<main>
<h1>VEIW CATEGORIES AND SUB-CATEGORIES</h1>
 
 
{{!-- Product Add --}}

<div class="table-admin">
    <h2>OVERALL CATEGORIES</h2> 
    <div class="search-options">
        <div class="input-admin">
            <input type="text" placeholder="Search here..">
            <i  class="fa-solid fa-magnifying-glass" style = "margin-right:1rem"></i>
        </div>
    </div>
    <div class="table">
         <table>
            <thead>
            <tr>
                <th>Category Id</th>
                <th>Category Name</th>
                <th>Category Offer(%)</th>
                <th>Hide</th>
                <th>Update</th>
            </tr>
            </thead>
            <tbody>
             {{!-- DYNAMIC DATA --}}
            </tbody>
        </table>
    </div>
    <div class="pagination">
            <ul class="up"></ul>
    </div>
    <div class="table" id="subCategory">
         <table>
            <thead>
            <tr>
                <th>Sub-Category Id</th>
                <th>Sub-Category Name</th>
                <th>Cateogory</th>
                <th>Preview</th>
                <th>Hide</th>
                <th>Update</th>
            </tr>
            </thead>
            <tbody>
             {{!-- DYNAMIC DATA --}}
            </tbody>
        </table>
    </div>
    <div class="pagination">
            <ul class="down"></ul>
    </div>
</div>
    
 

{{!-- END OF ORDERS --}}
{{!-- FORM FOR MODIFYING EXISTING DATA --}}
  <div class="form-popup">
     <h2>Modify Category</h2>
    <form id="modify-form" class="">
     
      <div class="form-row">
        <label for="id">ID</label>
        <input type="text" id="id" name="id" placeholder="Id" readonly>
      </div>
      <div class="form-row">
        <label for="productName">Category Name</label>
        <input type="text" id="name" name="name" placeholder="Catetgory Name" required>
      </div>
      <div class="form-row">
        <label for="brandName">Category Offer</label>
        <input type="number" id="offer" name="offer" placeholder="Enter the cateogory Offer" max="100" required>
      </div>
      <button type="submit" class="modify">Modify</button>
      <button type="button" class="close" onclick="closeForm()">Close</button>
      <input type="number" class="number" name="number" hidden>   
    </form>

  </div>
  {{!-- END OF FORM FOR MODIFYING EXISTING DATA --}}
</main>

{{!-- END OF MAIN --}}

<div class="right">
    <div class="top">
        <button id="menu-btn">
            <i class="fa-solid fa-bars"></i>
        </button>
        <div class="theme-toggler">
            <i class="fa-solid fa-sun active"></i>
            <i class="fa-solid fa-moon"></i>
        </div>
        <div class="profile">
            <div class="info">
                <p>Hey , <b>Sarin </b></p>
                <small class="text-muted">ADMIN</small>
            </div>
            <div class="profile-photo">
                <img src="/images/profile.jpg" alt="#">
            </div>
        </div>
    </div>
  
</div>
<script src="/JS/adminContent.js"></script>
<script>
    const sideBarOpts = document.querySelectorAll(".sidebar a");
     

    sideBarOpts.forEach(a=>{
        a.classList.remove("active");
    })
    sideBarOpts[6].classList.add("active");
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
<script>
    //REQUIRED DOM DATA
    let tableTbody = document.querySelector(".table-admin table tbody");
    let tableSbody = document.querySelector(".table-admin #subCategory tbody");

    let input = document.querySelector(".input-admin input");
    let category = document.querySelector(".search-options .category");
    let totalPages;
    let totalSPages;
    let pg;
    let subCategory = document.querySelector(".search-admin .subCategory");    
    //REQUIRED DOM DATA

    //Numbered FLAG
    let flag;
    //Numbered FLAG

    
    //SEARCH LOGIC
    input.addEventListener("input",()=>{
        flag=1;
        const searchTerm = input.value.trim();
       run(`ctgry-add/api/ctgrys?s=${searchTerm}`);
    })
    //SEARCH LOGIC
    
     
     
    //RUN FETCHING DATA
    async function run(url){
        try {
            const response = await fetch(url); // Replace with your API endpoint URL
            if (!response.ok) {
            throw new Error('Request failed with status: ' + response.status);
            }
            const ctr = await response.json();
            if(!ctr.categories){
                tableTbody.innerHTML="No Data";
            }
            
            tableTbody.innerHTML="";
           ctr.categories.forEach(c => {
            tableTbody.innerHTML += `
                <tr>
                    <td>${c._id}</td>
                    <td>${c.name}</td>
                    <td>${c.offer}</td>
                    ${
                        c.isHidden
                        ? `<td><a href="#" onclick="showHidePopupUn(event, '${c._id}')" class="butn btn-updt"><i class="fa-solid fa-thumbs-down"></i></a></td>`
                        : `<td><a href="#" onclick="showHidePopup(event, '${c._id}')" class="butn btn-del"><i class="fa-solid fa-thumbs-up"></i></a></td>`
                    }
                    <td><a href="#" onclick="openForm('${c._id}', ${ctr.page})"><i class="fa-solid fa-pen" style="font-size:1rem;"></i></a></td>
                </tr>`;
                                });

        } catch (error) {
            // Handle any errors that occurred during the fetch
            console.log('Error:', error.message);
                
        }
    }

    async function runS(url){
      
        try {
            const response = await fetch(url); // Replace with your API endpoint URL
            if (!response.ok) {
            throw new Error('Request failed with status: ' + response.status);
            }
            const subCtr = await response.json();
            if(!subCtr.subCategories){
                tableTbody.innerHTML="No Data";
            }
            subCtr.subCategories.forEach(c=>{
                
            })
            tableSbody.innerHTML="";
           subCtr.subCategories.forEach(c => {
            c.photo = JSON.parse(c.photo);
            console.log(c.photo);
         {{!-- c.photo.filepath = c.photo.filepath.replace(/\\/g, "/"); --}}
             
            tableSbody.innerHTML += `   
                <tr>
                    <td>${c._id}</td>
                    <td>${c.name}</td>
                    <td>${c.category.name}</td>
                    <td>
                        ${
                         
                        c.photo && c.photo.filepath
                            ? `<img src="${c.photo.filepath}" alt="" style="width:100px;height:60px" accept="image/png">`
                            : 'No Image Available'
                        }
                    </td>
                    ${
                        c.isHidden
                        ? `<td><a href="#" onclick="showHidePopupUn(event, '${c._id}')" class="butn btn-updt"><i class="fa-solid fa-thumbs-down"></i></a></td>`
                        : `<td><a href="#" onclick="showHidePopup(event, '${c._id}')" class="butn btn-del"><i class="fa-solid fa-thumbs-up"></i></a></td>`
                    }
                    <td><a href="#" onclick="openForm('${c._id}', ${subCtr.page})"><i class="fa-solid fa-pen" style="font-size:1rem;"></i></a></td>
                </tr>`;
                                });

        } catch (error) {
            // Handle any errors that occurred during the fetch
            console.log('Error:', error.message);      
        }
    }
    //RUN FETCHING DATA
   
    // *************PAGINATION UI******************
 
 
       

    
    
    function element(totalPages,page,id){
         
        flag=3;
        let liTag = "";
        let beforePages = page-1;
        let afterPages = page+1;
        let activeLi;
        
        if(page>1){
            liTag+=`<li class="btn prev" onclick="element(${totalPages},${beforePages},'${id}')"><span><i class="fa-solid fa-chevron-left"></i></span>Prev</li>`;
        }
        if(page>2){
            liTag+=`<li class="numb ${activeLi}" onclick="element(${totalPages},1,'${id}')"><span>1</span></li>`;
            if(page>3){
            liTag+=`<li class="dots"><span>....</span></li>`
            }
        }
        
        {{!-- //how many pages or li show before the current li
        if(page==1){
            afterPages=afterPages+2;
        }else if( page==2){
            afterPages=afterPages+1;
        }
        
        //how many pages or li show before the current li
        if(page==totalPages){
            beforePages=beforePages-2;
        }else if( page==totalPages-1){
            beforePages=beforePages-1;
        }
         --}}
        for(let pageLength=beforePages;pageLength<=afterPages;pageLength++){
            if(pageLength>totalPages|| pageLength <= 0){
            continue;
            }
            if(pageLength<1){
            pageLength = pageLength+1;
            }
            if(page==pageLength){
            activeLi="active";
            }else{
            activeLi="";
            }
            liTag+=`<li class="numb ${activeLi}" onclick="element(${totalPages},${pageLength},'${id}')"><span>${pageLength}</span></li>`;
        }
        
        if(page<totalPages-1){
            if(page<totalPages-2){
            liTag+=`<li class="dots"><span>....</span></li>`
            }
            liTag+=`<li class="numb" onclick="element(${totalPages},${totalPages},'${id}')"><span>${totalPages}</span></li>`;
        }
        
        if(page<totalPages){
        liTag+=`<li class="btn next" onclick="element(${totalPages},${afterPages},'${id}')">Next<span><i class="fa-solid fa-chevron-right"></i></span></li>`; 
        }
         
        document.querySelector(`.${id}`).innerHTML=liTag;
        pg=page;
        run(`ctgry-add/api/ctgrys?p=${page}`)
    }
    
    // *************PAGINATION UI******************

    //ALERT POPOUP BEFORE DELETE
   

    //form popup   
    //MODAL FOR DATA UPDATION
    async function openForm(id,pg){
        document.querySelector(".form-popup").style.display = "block";
        let dataD = await fetch(`/custom/categories/${id}`);
        let data = await dataD.json();
        console.log(data);
        document.querySelector("#id").value = data._id;
        document.querySelector("#name").value = data.name;
        document.querySelector("#offer").value = data.offer;
        document.querySelector(".form-popup .number").value = pg ; 
    }
    //MODAL FOR DATA UPDATION

    function closeForm() {
        document.querySelector(".form-popup").style.display = "none";
    }
    //form popup

    //Form Submission
    const form = document.querySelector("#modify-form");
    form.addEventListener("submit",async(e)=>{
        e.preventDefault();
        const formData = new FormData(form);
        const id = formData.get("id");
        const name = formData.get("name");
        const offer = formData.get("offer");
        const page = formData.get("number");
        const body = {
            name,
            offer,
            page
        };
        try{
            const response = await fetch(`/custom/categories/${id}`, {
            method: "PUT",
            headers: {
            "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        });
        if (!response.ok) {
            throw new Error("Request failed with status: " + response.status);
        }
        Swal.fire({
            position: 'top-end',
            icon: 'success',
            title: 'Your work has been saved',
            showConfirmButton: false,
            timer: 1500
        })
        run(`ctgry-add/api/ctgrys?p=${page}`);
        closeForm();
        }catch(err){
            console.log(err)
        }
    })
    //Form Submission

    document.addEventListener("DOMContentLoaded", async function() {
        // DOM manipulation and other code here
            run('ctgry-add/api/ctgrys');
            runS('ctgry-add/api/subCtgrys');
            const response = await fetch("ctgry-add/api/ctgrys"); // Replace with your API endpoint URL
            const response2 = await fetch("ctgry-add/api/subCtgrys"); // Replace with your API endpoint URL
            if (!response.ok) {
                throw new Error('Request failed with status: ' + response.status);
            }
            if (!response2.ok) {
                throw new Error('Request failed with status: ' + response2.status);
            }
            const ctr = await response.json();
            const subCtr = await response2.json();
             
            totalPages = Math.ceil(ctr.total/ctr.limit);
            totalSPages = Math.ceil(subCtr.total/subCtr.limit);
            element(totalPages,1,"up")
            {{!-- element(totalSPages,1,up) --}}
        
    });

    function showPopup(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to Hide this product",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Hide this Product!'
        }).then(async (result) => {
        if (result.isConfirmed) {
           const url = `/product-view?hide_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`/api/ctgrys?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }

        }
        });
    }
    function showFeaturePopup(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to feature this product?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Feature this Product!'
        }).then(async (result) => {
        if (result.isConfirmed) {
           const url = `/product-view?feature_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`ctgry-add/api/ctgrys?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }
        
        }
        });
    }
    function showFeaturePopupUn(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to remove it from featured products?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Ommit this Product from Products!'
        }).then(async (result) => {
        if (result.isConfirmed) {
            const url = `/product-view?unFeature_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`ctgry-add/api/ctgrys?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }

        }
        });
    }

    {{!-- //MODAL FOR DATA UPDATION
    async function openForm(id,pg){
        document.querySelector(".form-popup").style.display = "block";
        let dataD = await fetch(`ctgry-add/api/ctgrys/${id}`);
        let data = await dataD.json();
        document.querySelector("#id").value = data[0]._id;
        document.querySelector("#productName").value = data[0].productName;
        document.querySelector("#brandName").value = data[0].brandName;
        document.querySelector("#productName").value = data[0].productName;
        document.querySelector("#description").value = data[0].description;
        document.querySelector("#points").value = data[0].points.join(",");
        document.querySelector("#productPrice").value = data[0].productPrice;
        document.querySelector("#salePrice").value = data[0].salePrice;
        document.querySelector("#stock").value = data[0].stock;
        document.querySelector("#category").value = data[0].category;
        document.querySelector("#subCategory").value = data[0].subCategory;
        document.querySelector("#paymentOption").value = data[0].paymentOption;
        document.querySelector("#rating").value = data[0].rating;
        document.querySelector(".form-popup .number").value = pg ; 
    }
    //MODAL FOR DATA UPDATION

    function closeForm() {
        document.querySelector(".form-popup").style.display = "none";
    }

    const form = document.querySelector("#modify-form"); --}}

    
        
        
    </script>
</body>
</html>