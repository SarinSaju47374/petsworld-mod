<main>
<h1>VIEW PRODUCTS</h1>
 
{{!-- Product Add --}}

<div class="table-admin">
    <h2>Add a Product</h2> 
    <div class="search-options">
        <div class="input-admin">
            <input type="text" placeholder="Search here..">
            <i  class="fa-solid fa-magnifying-glass" style = "margin-right:1rem"></i>
        </div>
        <select class="category">
             <option value="">All</option>
        </select>
        <select class="subCategory">
            <option value="">All</option>
        </select>
    </div>
    <div class="table">
         <table>
            <thead>
            <tr>
                <th>ProductName</th>
                <th>ProductPrice</th>
                <th>SalePrice</th>
                <th>Stock</th>
                <th>Category</th>
                <th>SubCategory</th>
                <th>Featured</th>
                <th>Preview</th>
                <th></th>
                <th></th>
            </tr>
            </thead>
            <tbody>
             {{!-- DYNAMIC DATA --}}
            </tbody>
        </table>
    </div>
    <div class="pagination">
            <ul></ul>
    </div>
</div>

{{!-- END OF ORDERS --}}
{{!-- FORM FOR MODIFYING EXISTING DATA --}}
  <div class="form-popup">
     <h2>Modify Product</h2>
    <form id="modify-form">
     
      <div class="form-row">
        <label for="id">ID</label>
        <input type="text" id="id" name="id" placeholder="Id" readonly>
      </div>
      <div class="form-row">
        <label for="productName">Product Name</label>
        <input type="text" id="productName" name="productName" placeholder="productName" required>
      </div>
      <div class="form-row">
        <label for="brandName">Brand Name</label>
        <input type="text" id="brandName" name="brandName" placeholder="brandName" required>
      </div>
      <div class="form-row">
        <label for="description">Description</label>
        <input type="text" id="description" name="description" placeholder="description" required>
      </div>
      <div class="form-row">
        <label for="points">Points</label>
        <input type="text" id="points" name="points" placeholder="points" required>
      </div>
      <div class="form-row">
        <label for="productPrice">Product Price</label>
        <input type="text" id="productPrice" name="productPrice" placeholder="productPrice"  required>
      </div>
      <div class="form-row">
        <label for="iscount">Discount</label>
        <input type="number" name="discount" id = "discount" placeholder="Enter the Default Discount" max="100" required>
      </div>
      <div class="form-row">
        <label for="stock">Stock</label>
        <input type="text" id="stock" name="stock" placeholder="stock" required>
      </div>   
      <div class="form-row">
        <label for="rating">Rating</label>
        <input type="text" id="rating" name="rating" placeholder="rating" required>
      </div>
      <button type="submit" class="modify">Modify</button>
      <button type="button" class="close" onclick="closeForm()">Close</button>
      <input type="number" class="number" name="number" hidden>   
    </form>

  </div>
  {{!-- END OF FORM FOR MODIFYING EXISTING DATA --}}
</main>

{{!-- END OF MAIN --}}

<div class="right">
    <div class="top">
        <button id="menu-btn">
            <i class="fa-solid fa-bars"></i>
        </button>
        <div class="theme-toggler">
            <i class="fa-solid fa-sun active"></i>
            <i class="fa-solid fa-moon"></i>
        </div>
        <div class="profile">
            <div class="info">
                <p>Hey , <b>Sarin </b></p>
                <small class="text-muted">ADMIN</small>
            </div>
            <div class="profile-photo">
                <img src="/images/profile.jpg" alt="#">
            </div>
        </div>
    </div>
    
    
</div>
<script src="/JS/adminContent.js"></script>
<script>
    const sideBarOpts = document.querySelectorAll(".sidebar a");
    sideBarOpts.forEach(a=>{
        a.classList.remove("active");
    })
    sideBarOpts[4].classList.add("active");
</script>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script> 
<script>
    //REQUIRED DOM DATA
    let tableTbody = document.querySelector(".table-admin table tbody");
    let input = document.querySelector(".input-admin input");
    let category = document.querySelector(".search-options .category");
    let totalPages;
    let pg;
    let subCategory = document.querySelector(".search-admin .subCategory");    
    //REQUIRED DOM DATA

    //Numbered FLAG
    let flag;
    //Numbered FLAG

    
    //SEARCH LOGIC
    input.addEventListener("input",()=>{
        flag=1;
        const searchTerm = input.value.trim();
        run(`api/products?s=${searchTerm}`);
    })
    //SEARCH LOGIC
    
    //CATEGORY SELECTION LOGIC
    category.addEventListener("change",async()=>{
        flag=2
        const option = category.value;
        run(`api/products?cat=${option}`);
        const response = await fetch(`/api/products?cat=${option}`); // Replace with your API endpoint URL
            if (!response.ok) {
                throw new Error('Request failed with status: ' + response.status);
            }
            const pr = await response.json();
            totalPages = Math.ceil(pr.total/pr.limit);
            element(totalPages,1)
    })
    //CATEGORY SELECTION LOGIC
     
    //RUN FETCHING DATA
    async function run(url){
        try {
            const response = await fetch(url); // Replace with your API endpoint URL
            if (!response.ok) {
            throw new Error('Request failed with status: ' + response.status);
            }
            const pr = await response.json();
            if(!pr.products){
                tableTbody.innerHTML="No Data";
            }
            
            tableTbody.innerHTML="";
           pr.products.forEach(p => {
            tableTbody.innerHTML += `
                <tr>
                    <td>${p.productName}</td>
                    <td>${p.productPrice}</td>
                    <td>${p.salePrice}</td>
                    <td>${p.stock}</td>
                    <td>${p.category.name}</td>
                    <td>${p.subCategory.name}</td>
                    ${
                        p.isFeatured
                        ? `<td><a href="#" onclick="showFeaturePopupUn(event, '${p._id}')" class="butn btn-updt"><i class="fa-solid fa-thumbs-down"></i></a></td>`
                        : `<td><a href="#" onclick="showFeaturePopup(event, '${p._id}')" class="butn btn-del"><i class="fa-solid fa-thumbs-up"></i></a></td>`
                    }
                    <td>
                        ${
                        p.photo[0] && p.photo[0].filepath
                            ? `<img src="${p.photo[0].filepath}" alt="" style="width:100px;height:60px" accept="image/png">`
                            : 'No Image Available'
                        }
                    </td>
                    <td><a href="#" onclick="openForm('${p._id}', ${pr.page})"><i class="fa-solid fa-pen" style="font-size:1rem;"></i></a></td>
                    <td><a href="#" onclick="showPopup(event, '${p._id}')" class="butn btn-del"><i class="fa-solid fa-trash" style="font-size:1rem;"></i></a></td>
                </tr>`;
                                });

        } catch (error) {
            // Handle any errors that occurred during the fetch
            console.log('Error:', error.message);
                
        }
    }
    //RUN FETCHING DATA
   
    // *************PAGINATION UI******************
 
 
       

    const ulTag = document.querySelector("ul");
    
    function element(totalPages,page){
        flag=3;
        let liTag = "";
        let beforePages = page-1;
        let afterPages = page+1;
        let activeLi;
        
        if(page>1){
            liTag+=`<li class="btn prev" onclick="element(totalPages,${beforePages})"><span><i class="fa-solid fa-chevron-left"></i></span>Prev</li>`;
        }
        if(page>2){
            liTag+=`<li class="numb ${activeLi}" onclick="element(totalPages,1)"><span>1</span></li>`;
            if(page>3){
            liTag+=`<li class="dots"><span>....</span></li>`
            }
        }
        
        {{!-- //how many pages or li show before the current li
        if(page==1){
            afterPages=afterPages+2;
        }else if( page==2){
            afterPages=afterPages+1;
        }
        
        //how many pages or li show before the current li
        if(page==totalPages){
            beforePages=beforePages-2;
        }else if( page==totalPages-1){
            beforePages=beforePages-1;
        }
         --}}
        for(let pageLength=beforePages;pageLength<=afterPages;pageLength++){
            if(pageLength>totalPages|| pageLength <= 0){
            continue;
            }
            if(pageLength<1){
            pageLength = pageLength+1;
            }
            if(page==pageLength){
            activeLi="active";
            }else{
            activeLi="";
            }
            liTag+=`<li class="numb ${activeLi}" onclick="element(totalPages,${pageLength})"><span>${pageLength}</span></li>`;
        }
        
        if(page<totalPages-1){
            if(page<totalPages-2){
            liTag+=`<li class="dots"><span>....</span></li>`
            }
            liTag+=`<li class="numb" onclick="element(totalPages,${totalPages})"><span>${totalPages}</span></li>`;
        }
        
        if(page<totalPages){
        liTag+=`<li class="btn next" onclick="element(totalPages,${afterPages})">Next<span><i class="fa-solid fa-chevron-right"></i></span></li>`; 
        }
        ulTag.innerHTML=liTag;
        pg=page;
        run(`api/products?p=${page}`)
    }
    
    // *************PAGINATION UI******************

    //ALERT POPOUP BEFORE DELETE
   
         
        document.addEventListener("DOMContentLoaded", async function() {
        // DOM manipulation and other code here
          run('/api/products');
        const response = await fetch("/api/products"); // Replace with your API endpoint URL
            if (!response.ok) {
                throw new Error('Request failed with status: ' + response.status);
            }
            const pr = await response.json();
            if(pr.categories){
                pr.categories.forEach(cat=>{
                    category.innerHTML+=`<option value="${cat}">${cat}</option>`;
                })
            }
            totalPages = Math.ceil(pr.total/pr.limit);
            element(totalPages,1)
        
        });
    function showPopup(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to Hide this product",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Hide this Product!'
        }).then(async (result) => {
        if (result.isConfirmed) {
           const url = `/product-view?hide_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`api/products?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }

        }
        });
    }
    function showFeaturePopup(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to feature this product?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Feature this Product!'
        }).then(async (result) => {
        if (result.isConfirmed) {
           const url = `/product-view?feature_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`api/products?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }

        }
        });
    }
    function showFeaturePopupUn(event, productId) {
        event.preventDefault();
        Swal.fire({
        title: 'Are you sure?',
        text: "Do you really want to remove it from featured products?",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, Ommit this Product from Products!'
        }).then(async (result) => {
        if (result.isConfirmed) {
            const url = `/product-view?unFeature_oid=${productId}`;
        try {
            const response = await fetch(url);
            if (response.ok) {
                const data = await response.json();
                if(data.success){
                    run(`api/products?p=${pg}`)
                }
            } else {
                // Handle the error if the response is not ok
                console.error('Error:', response.status);
            }
        } catch (error) {
        // Handle any network or other errors
            console.error('Error:', error);
        }

        }
        });
    }

    //MODAL FOR DATA UPDATION
    async function openForm(id,pg){
        document.querySelector(".form-popup").style.display = "block";
        let dataD = await fetch(`/api/products/${id}`);
        let data = await dataD.json();
        document.querySelector("#id").value = data[0]._id;
        document.querySelector("#productName").value = data[0].productName;
        document.querySelector("#brandName").value = data[0].brandName;
        document.querySelector("#productName").value = data[0].productName;
        document.querySelector("#description").value = data[0].description;
        document.querySelector("#points").value = data[0].points.join(",");
        document.querySelector("#productPrice").value = data[0].productPrice;
        document.querySelector("#discount").value = data[0].discount;
        document.querySelector("#stock").value = data[0].stock;
        document.querySelector("#rating").value = data[0].rating;
        document.querySelector(".form-popup .number").value = pg ; 
    }
    //MODAL FOR DATA UPDATION

    function closeForm() {
        document.querySelector(".form-popup").style.display = "none";
    }

    const form = document.querySelector("#modify-form");

    //FORM SUBMISSION AFTER MODIFICATION
    form.addEventListener("submit", async (e) => {
        e.preventDefault();
        const formData = new FormData(form);
        const id = formData.get("id");
        const productName = formData.get("productName");
        const brandName = formData.get("brandName");
        const description = formData.get("description");
        const points = formData.get("points");
        const productPrice = formData.get("productPrice");
        const discount = formData.get("discount");
        const stock = formData.get("stock");
        const paymentOption = formData.get("paymentOption");
        const rating = formData.get("rating");
        const page = formData.get("number");

        const body = {
            productName,
            brandName,
            description,
            points,
            productPrice,
            discount,
            stock,
            paymentOption,
            rating,
            page
        };

        try {
        const response = await fetch(`/api/products/${id}`, {
            method: "PUT",
            headers: {
            "Content-Type": "application/json"
            },
            body: JSON.stringify(body)
        });
        if (!response.ok) {
            throw new Error("Request failed with status: " + response.status);
        }

        if(flag==1){
            //Beautiful code that triggers the "input" event 
            input.value=input.value;
            const event = new Event("input");
            input.dispatchEvent(event);
            
        }else if(flag==2){
            console.log(category)
            console.log(category.value)
            run(`api/products?cat=${category}`)
        }else if(flag==3){
            run(`api/products?p=${page}`)
        }

        
        // Update the modified data in the table or perform any other necessary actions

        // Hide the form
        document.querySelector(".form-popup").style.display = "none";
        } catch (error) {
        console.log("Error:", error.message);
        }
    });
    //FORM SUBMISSION AFTER MODIFICATION
        
        
    </script>
</body>
</html>